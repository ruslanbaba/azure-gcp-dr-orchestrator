# ArgoCD Application Configuration for GitOps Deployment

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: dr-orchestrator-production
  namespace: argocd
  labels:
    app.kubernetes.io/name: dr-orchestrator
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: disaster-recovery
spec:
  project: default
  
  source:
    repoURL: https://github.com/ruslanbaba/azure-gcp-dr-orchestrator
    targetRevision: HEAD
    path: kubernetes/overlays/production
    
    # Kustomize configuration
    kustomize:
      commonLabels:
        environment: production
        managed-by: argocd
      images:
      - name: dr-orchestrator
        newTag: latest
      patchesStrategicMerge:
      - production-patches.yaml
  
  destination:
    server: https://kubernetes.default.svc
    namespace: dr-system
  
  # Sync policy configuration
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    
    syncOptions:
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true
    - ApplyOutOfSyncOnly=true
    - RespectIgnoreDifferences=true
    
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m0s
  
  # Health and sync configuration
  revisionHistoryLimit: 10
  
  # Ignore differences for certain fields
  ignoreDifferences:
  - group: apps
    kind: Deployment
    jsonPointers:
    - /spec/replicas
  - group: ""
    kind: Service
    jsonPointers:
    - /spec/clusterIP
  
  # Resource hooks and waves
  info:
  - name: 'Description'
    value: 'Azure to GCP DR Orchestrator - Production Environment'
  - name: 'Owner'
    value: 'Platform Engineering Team'
  - name: 'Environment'
    value: 'Production'

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: dr-orchestrator-staging
  namespace: argocd
  labels:
    app.kubernetes.io/name: dr-orchestrator
    app.kubernetes.io/instance: staging
    app.kubernetes.io/part-of: disaster-recovery
spec:
  project: default
  
  source:
    repoURL: https://github.com/ruslanbaba/azure-gcp-dr-orchestrator
    targetRevision: HEAD
    path: kubernetes/overlays/staging
    
    kustomize:
      commonLabels:
        environment: staging
        managed-by: argocd
      images:
      - name: dr-orchestrator
        newTag: latest
  
  destination:
    server: https://kubernetes.default.svc
    namespace: dr-system-staging
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    
    syncOptions:
    - CreateNamespace=true
    - ApplyOutOfSyncOnly=true
    
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 1m0s

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: dr-orchestrator-development
  namespace: argocd
  labels:
    app.kubernetes.io/name: dr-orchestrator
    app.kubernetes.io/instance: development
    app.kubernetes.io/part-of: disaster-recovery
spec:
  project: default
  
  source:
    repoURL: https://github.com/ruslanbaba/azure-gcp-dr-orchestrator
    targetRevision: develop
    path: kubernetes/overlays/development
    
    kustomize:
      commonLabels:
        environment: development
        managed-by: argocd
  
  destination:
    server: https://kubernetes.default.svc
    namespace: dr-system-dev
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    
    syncOptions:
    - CreateNamespace=true
    
    retry:
      limit: 2
      backoff:
        duration: 5s
        maxDuration: 30s

---
# AppProject for DR Orchestrator
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: disaster-recovery
  namespace: argocd
spec:
  description: "Disaster Recovery Orchestrator Project"
  
  # Source repositories
  sourceRepos:
  - 'https://github.com/ruslanbaba/azure-gcp-dr-orchestrator'
  - 'https://helm.releases.hashicorp.com'  # For potential Helm charts
  
  # Allowed destinations
  destinations:
  - namespace: 'dr-system*'
    server: 'https://kubernetes.default.svc'
  - namespace: 'monitoring'
    server: 'https://kubernetes.default.svc'
  
  # Allowed cluster resources
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace
  - group: 'rbac.authorization.k8s.io'
    kind: ClusterRole
  - group: 'rbac.authorization.k8s.io'
    kind: ClusterRoleBinding
  - group: 'apiextensions.k8s.io'
    kind: CustomResourceDefinition
  - group: 'networking.istio.io'
    kind: Gateway
  
  # Allowed namespaced resources
  namespaceResourceWhitelist:
  - group: ''
    kind: Service
  - group: ''
    kind: ServiceAccount
  - group: ''
    kind: Secret
  - group: ''
    kind: ConfigMap
  - group: 'apps'
    kind: Deployment
  - group: 'apps'
    kind: StatefulSet
  - group: 'networking.k8s.io'
    kind: NetworkPolicy
  - group: 'policy'
    kind: PodDisruptionBudget
  - group: 'autoscaling'
    kind: HorizontalPodAutoscaler
  - group: 'networking.istio.io'
    kind: VirtualService
  - group: 'networking.istio.io'
    kind: DestinationRule
  - group: 'security.istio.io'
    kind: PeerAuthentication
  - group: 'security.istio.io'
    kind: AuthorizationPolicy
  
  # RBAC policies
  roles:
  - name: dev-team
    description: "Development team access"
    policies:
    - p, proj:disaster-recovery:dev-team, applications, get, disaster-recovery/*, allow
    - p, proj:disaster-recovery:dev-team, applications, sync, disaster-recovery/dr-orchestrator-development, allow
    groups:
    - disaster-recovery:developers
  
  - name: ops-team
    description: "Operations team access"
    policies:
    - p, proj:disaster-recovery:ops-team, applications, *, disaster-recovery/*, allow
    - p, proj:disaster-recovery:ops-team, repositories, *, *, allow
    groups:
    - disaster-recovery:operators
  
  # Sync windows
  syncWindows:
  - kind: allow
    schedule: '0 2 * * *'  # Daily at 2 AM
    duration: 2h
    applications:
    - 'dr-orchestrator-development'
  
  - kind: deny
    schedule: '0 9-17 * * 1-5'  # Business hours
    duration: 8h
    applications:
    - 'dr-orchestrator-production'
    
  - kind: allow
    schedule: '0 22 * * *'  # Daily at 10 PM
    duration: 4h
    applications:
    - 'dr-orchestrator-production'
    - 'dr-orchestrator-staging'

---
# ArgoCD Notifications Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  service.slack: |
    token: $slack-token
    
  service.webhook.pagerduty: |
    url: https://events.pagerduty.com/v2/enqueue
    headers:
    - name: Content-Type
      value: application/json
    
  template.app-deployed: |
    message: |
      {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} deployed to {{.app.spec.destination.namespace}}
      Revision: {{.app.status.sync.revision}}
      {{if .app.status.operationState.syncResult.revision}}
      Changes: {{.app.status.operationState.syncResult.revision}}
      {{end}}
  
  template.app-health-degraded: |
    message: |
      {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded health
      Current Health: {{.app.status.health.status}}
      {{if .app.status.operationState.syncResult.revision}}
      Revision: {{.app.status.operationState.syncResult.revision}}
      {{end}}
  
  template.app-sync-failed: |
    message: |
      {{if eq .serviceType "slack"}}:x:{{end}} Application {{.app.metadata.name}} sync failed
      Error: {{.app.status.operationState.message}}
      Revision: {{.app.status.sync.revision}}
  
  trigger.on-deployed: |
    - description: Application is synced and healthy
      send:
      - app-deployed
      when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
  
  trigger.on-health-degraded: |
    - description: Application has degraded health
      send:
      - app-health-degraded
      when: app.status.health.status == 'Degraded'
  
  trigger.on-sync-failed: |
    - description: Application sync failed
      send:
      - app-sync-failed
      when: app.status.operationState.phase in ['Error', 'Failed']
  
  subscriptions: |
    - recipients:
      - slack:platform-engineering
      - webhook:pagerduty
      triggers:
      - on-deployed
      - on-health-degraded
      - on-sync-failed
